# -*- coding: utf-8 -*-
"""CS669_Assignment_01_V21093

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nAmZzj4SlTpbuOEopCyHPZyaLDvv1L9e
"""

import pandas as pd
import numpy as np
import math as ma
from matplotlib import pyplot as plt

A=[]
B1=[]
d1=pd.read_csv("Segment2_VAD_GT.csv")
d2=pd.read_csv("Segment2_STEnergy.csv")
d3=pd.read_csv("Segment2_MelEnergy.csv")
d4=pd.read_csv("Segment3_MelEnergy.csv")
d5=pd.read_csv("Segment3_STEnergy.csv")
d6=pd.read_csv("Segment3_VAD_GT.csv")
d1.columns=["Chance"]
d2.columns=["STEnergy"]
d3.columns=["ml"]
d4.columns=["Test2"]
d5.columns=["Test1"]
d6.columns=["Gt"]
c=0
for i in d1.loc[:,"Chance"]:
    
    if(i==1):
        A.append(d2.STEnergy[c])
    else:
        B1.append(d2.STEnergy[c])
    c=c+1

"""QUESTION 1"""

#Finding mean and variance of speech class with STEnergy.    
c=0    
for i in A:
    c=c+i
mean=c/111    
c=0
for i in A:
    c=c+(i-mean)**2
variance=c/110
sd=ma.sqrt(variance)
def Gaussian1(x):
    return (1/ma.sqrt(2*ma.pi)*sd)*ma.exp(-0.5*((x-mean)/sd)**2)

#Finding Mean and variance of non speech class.
c=0    
for i in B1:
    c=c+i
mean1=c/144   
c=0
for i in B1:
    c=c+(i-mean1)**2
variance1=c/143
sd1=ma.sqrt(variance1)
def Gaussian2(x):
    return (1/ma.sqrt(2*ma.pi)*sd1)*ma.exp(-0.5*((x-mean1)/sd1)**2)
ps=111/255
pn=144/255
A2=[]
A3=[]
#Training model and testing it for Given data.

n=np.linspace(0, 1,1000)
for i in range(1000):
    
    A1=[]
    c=0
    tp=0
    fn=0
    tn=0
    fp=0
    for j in d5.loc[:,"Test1"]:
        p=(Gaussian1(j)*ps)
        q=(Gaussian2(j)*pn)
        if (p/(p+q))>=n[i]:
            A1.append(1)
        else:
            A1.append(0)
        
    for k in d6.loc[:,"Gt"]:
        if (k==1) and (A1[c]==1):
            tp=tp+1
        elif (k==1) and (A1[c]==0):
            fn=fn+1
        elif (k==0) and (A1[c]==1):
            fp=fp+1
        elif (k==0) and (A1[c]==0):
            tn=tn+1
        c=c+1
    l=(tp+fn)
    l1=(fp+tn)
    
    A2.append(tp/l)  
    A3.append(fp/l1)

     


B=[]
B4=[]
c=0
for i in d1.loc[:,"Chance"]:
    
    if(i==1):
        B.append(d3.ml[c])
    else:
        B4.append(d3.ml[c])
    c=c+1

#Finding mean and variance for speech class with MelEnergy.    
c=0    
for i in B:
    c=c+i
mean2=c/111    
c=0
for i in B:
    c=c+(i-mean2)**2
variance2=c/110
sd2=ma.sqrt(variance2)
def Gaussian(x):
    return (1/ma.sqrt(2*ma.pi)*sd2)*ma.exp(-0.5*((x-mean2)/sd2)**2)
#Finding mean and variance for non speech class with MelEnergy.
c=0    
for i in B4:
    c=c+i
mean3=c/144    
c=0
for i in B4:
    c=c+(i-mean3)**2
variance3=c/143
sd3=ma.sqrt(variance3)
def Gaussian3(x):
    return (1/ma.sqrt(2*ma.pi)*sd3)*ma.exp(-0.5*((x-mean3)/sd3)**2)
B2=[]
B3=[]

m=np.linspace(0.2,1,1000)
for i in range(1000):
    

    A1=[]
    c=0
    tp=0
    fn=0
    fp=0
    tn=0
    for j in d4.loc[:,"Test2"]:
        p1=Gaussian(j)*ps
        q1=Gaussian3(j)*pn
        if (p1/(p1+q1))>=m[i]:
            A1.append(1)
        else:
            A1.append(0)
    
       
    for k in d6.loc[:,"Gt"]:
        if (k==1) and (A1[c]==1):
            tp=tp+1
        elif (k==1) and (A1[c]==0):
            fn=fn+1
        elif (k==0) and (A1[c]==1):
            fp=fp+1
        elif (k==0) and (A1[c]==0):
            tn=tn+1
        c=c+1
       
    
    l=(tp+fn)
    l1=(fp+tn)    
    B2.append(tp/l)  
    B3.append(fp/l1)     


plt.plot(A3,A2,color='green',label='STEnergy')
plt.plot(B3,B2,color='red',label='MelEnergy')
plt.xlabel("False Alarm Rate")
plt.ylabel("Hit")
plt.legend()
plt.show()

